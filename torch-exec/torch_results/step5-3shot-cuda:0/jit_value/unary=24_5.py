import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self, negative_slope):
        super().__init__()
        self.conv = torch.nn.Conv2d(3, 8, 1, stride=1, padding=1)
        self.negative_slope = negative_slope

    def forward(self, x1):
        v1 = self.conv(x1)
        v2 = torch.sigmoid(v1)
        v3 = v1 > 1
        v4 = self.negative_slope * v1
        v5 = torch.where(v3, v4, v2)
        return v5


negative_slope = 1

func = Model(negative_slope).to('cuda:0')


x1 = torch.randn(1, 3, 64, 64)

test_inputs = [x1]

# JIT_VALUE
'''
direct:
tensor([[[[0.5591, 0.5591, 0.5591,  ..., 0.5591, 0.5591, 0.5591],
          [0.5591, 1.4860, 0.6084,  ..., 0.5024, 0.7126, 0.5591],
          [0.5591, 0.5722, 0.5937,  ..., 0.6693, 1.3565, 0.5591],
          ...,
          [0.5591, 0.2957, 0.4555,  ..., 0.5169, 0.5087, 0.5591],
          [0.5591, 0.5540, 0.5043,  ..., 0.6324, 0.6348, 0.5591],
          [0.5591, 0.5591, 0.5591,  ..., 0.5591, 0.5591, 0.5591]],

         [[0.4389, 0.4389, 0.4389,  ..., 0.4389, 0.4389, 0.4389],
          [0.4389, 0.2203, 0.5132,  ..., 0.3974, 0.4813, 0.4389],
          [0.4389, 0.3382, 0.3186,  ..., 0.4636, 0.2898, 0.4389],
          ...,
          [0.4389, 0.4705, 0.6168,  ..., 0.3686, 0.4035, 0.4389],
          [0.4389, 0.4332, 0.6482,  ..., 0.3178, 0.1859, 0.4389],
          [0.4389, 0.4389, 0.4389,  ..., 0.4389, 0.4389, 0.4389]],

         [[0.4321, 0.4321, 0.4321,  ..., 0.4321, 0.4321, 0.4321],
          [0.4321, 0.5196, 0.3513,  ..., 0.4871, 0.1158, 0.4321],
          [0.4321, 0.4604, 0.4531,  ..., 0.2882, 0.3606, 0.4321],
          ...,
          [0.4321, 0.6456, 0.4031,  ..., 1.0369, 0.5565, 0.4321],
          [0.4321, 0.4021, 0.3199,  ..., 0.4414, 0.5752, 0.4321],
          [0.4321, 0.4321, 0.4321,  ..., 0.4321, 0.4321, 0.4321]],

         ...,

         [[0.5159, 0.5159, 0.5159,  ..., 0.5159, 0.5159, 0.5159],
          [0.5159, 0.2743, 0.5831,  ..., 0.4767, 0.4183, 0.5159],
          [0.5159, 0.3938, 0.3664,  ..., 0.4990, 0.3167, 0.5159],
          ...,
          [0.5159, 0.6106, 0.7106,  ..., 0.5447, 0.5126, 0.5159],
          [0.5159, 0.4959, 0.7214,  ..., 0.3651, 0.2215, 0.5159],
          [0.5159, 0.5159, 0.5159,  ..., 0.5159, 0.5159, 0.5159]],

         [[0.6151, 0.6151, 0.6151,  ..., 0.6151, 0.6151, 0.6151],
          [0.6151, 0.5709, 0.6986,  ..., 0.5502, 1.5302, 0.6151],
          [0.6151, 0.5553, 0.5553,  ..., 0.7228, 0.6657, 0.6151],
          ...,
          [0.6151, 0.4379, 0.6746,  ..., 0.4307, 0.5279, 0.6151],
          [0.6151, 0.6220, 1.0223,  ..., 0.5752, 0.4302, 0.6151],
          [0.6151, 0.6151, 0.6151,  ..., 0.6151, 0.6151, 0.6151]],

         [[0.5197, 0.5197, 0.5197,  ..., 0.5197, 0.5197, 0.5197],
          [0.5197, 0.6234, 0.4669,  ..., 0.5480, 0.1452, 0.5197],
          [0.5197, 0.5118, 0.5007,  ..., 0.3808, 0.4549, 0.5197],
          ...,
          [0.5197, 0.6931, 0.5268,  ..., 1.5015, 0.6358, 0.5197],
          [0.5197, 0.4771, 0.4483,  ..., 0.5004, 0.5862, 0.5197],
          [0.5197, 0.5197, 0.5197,  ..., 0.5197, 0.5197, 0.5197]]]],
       device='cuda:0')

jit:
tensor([[[[0.5591, 0.5591, 0.5591,  ..., 0.5591, 0.5591, 0.5591],
          [0.5591, 1.4855, 0.6084,  ..., 0.5024, 0.7125, 0.5591],
          [0.5591, 0.5723, 0.5937,  ..., 0.6693, 1.3563, 0.5591],
          ...,
          [0.5591, 0.2958, 0.4555,  ..., 0.5168, 0.5087, 0.5591],
          [0.5591, 0.5540, 0.5043,  ..., 0.6324, 0.6348, 0.5591],
          [0.5591, 0.5591, 0.5591,  ..., 0.5591, 0.5591, 0.5591]],

         [[0.4389, 0.4389, 0.4389,  ..., 0.4389, 0.4389, 0.4389],
          [0.4389, 0.2203, 0.5133,  ..., 0.3974, 0.4814, 0.4389],
          [0.4389, 0.3382, 0.3185,  ..., 0.4636, 0.2897, 0.4389],
          ...,
          [0.4389, 0.4706, 0.6168,  ..., 0.3686, 0.4035, 0.4389],
          [0.4389, 0.4331, 0.6483,  ..., 0.3178, 0.1859, 0.4389],
          [0.4389, 0.4389, 0.4389,  ..., 0.4389, 0.4389, 0.4389]],

         [[0.4321, 0.4321, 0.4321,  ..., 0.4321, 0.4321, 0.4321],
          [0.4321, 0.5197, 0.3513,  ..., 0.4870, 0.1158, 0.4321],
          [0.4321, 0.4604, 0.4531,  ..., 0.2881, 0.3606, 0.4321],
          ...,
          [0.4321, 0.6456, 0.4031,  ..., 1.0366, 0.5565, 0.4321],
          [0.4321, 0.4021, 0.3198,  ..., 0.4414, 0.5753, 0.4321],
          [0.4321, 0.4321, 0.4321,  ..., 0.4321, 0.4321, 0.4321]],

         ...,

         [[0.5159, 0.5159, 0.5159,  ..., 0.5159, 0.5159, 0.5159],
          [0.5159, 0.2743, 0.5831,  ..., 0.4768, 0.4183, 0.5159],
          [0.5159, 0.3938, 0.3663,  ..., 0.4989, 0.3166, 0.5159],
          ...,
          [0.5159, 0.6108, 0.7106,  ..., 0.5449, 0.5126, 0.5159],
          [0.5159, 0.4959, 0.7215,  ..., 0.3650, 0.2215, 0.5159],
          [0.5159, 0.5159, 0.5159,  ..., 0.5159, 0.5159, 0.5159]],

         [[0.6151, 0.6151, 0.6151,  ..., 0.6151, 0.6151, 0.6151],
          [0.6151, 0.5709, 0.6986,  ..., 0.5502, 1.5301, 0.6151],
          [0.6151, 0.5553, 0.5553,  ..., 0.7228, 0.6657, 0.6151],
          ...,
          [0.6151, 0.4379, 0.6746,  ..., 0.4308, 0.5279, 0.6151],
          [0.6151, 0.6220, 1.0224,  ..., 0.5752, 0.4302, 0.6151],
          [0.6151, 0.6151, 0.6151,  ..., 0.6151, 0.6151, 0.6151]],

         [[0.5197, 0.5197, 0.5197,  ..., 0.5197, 0.5197, 0.5197],
          [0.5197, 0.6233, 0.4669,  ..., 0.5480, 0.1452, 0.5197],
          [0.5197, 0.5118, 0.5007,  ..., 0.3808, 0.4549, 0.5197],
          ...,
          [0.5197, 0.6931, 0.5268,  ..., 1.5011, 0.6358, 0.5197],
          [0.5197, 0.4771, 0.4483,  ..., 0.5004, 0.5862, 0.5197],
          [0.5197, 0.5197, 0.5197,  ..., 0.5197, 0.5197, 0.5197]]]],
       device='cuda:0')
'''